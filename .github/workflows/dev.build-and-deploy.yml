name: Build Image & Deploy to ECR/ECS

on:
  push:
    branches:
      - dev
      #- jm-dev*
    #paths-ignore:
      #- '.github/workflows/**'

env:
  GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
  REPO_ID: ${{ secrets.REPO_ID }}

jobs:
  increment_build_num:
    name: Build & Deploy to ECR
    runs-on: ubuntu-latest
    environment: dev

    env:
      APP_VERSION: ${{ vars.APP_VERSION }}
      BUILD: ${{ vars.BUILD }}

    steps:
      - name: Checkout files
        uses: actions/checkout@v2

      - id: bump_build_version
        run: |
          current_build_num=$(echo $BUILD | cut -d - -f2)
          next_build_num=$((current_build_num+1))
          next_build="${APP_VERSION}-${next_build_num}"
          echo "NEXT_BUILD=$next_build" >> $GITHUB_OUTPUT

      - id: tag_commit
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/builds/${{ steps.bump_build_version.outputs.NEXT_BUILD }}',
              sha: context.sha
            })

      - id: update_build_var
        uses: octokit/request-action@v2.x
        with:
          route: PATCH /repositories/{repo_id}/environments/{gh_env}/variables/BUILD
          repo_id: ${{ secrets.REPO_ID }}
          gh_env: 'dev'
          name: "BUILD"
          value: '${{ steps.bump_build_version.outputs.NEXT_BUILD }}'

      - id: update_package_app_version
        run: npm run update-version ${{ steps.bump_build_version.outputs.NEXT_BUILD }}


  build_and_deploy_to_ecr:
    name: Build & Deploy to ECR
    needs: increment_build_num
    if: needs.increment_build_num.result == 'success'
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      contents: write

    #env:
      #APP_VERSION: ${{ vars.APP_VERSION }}
      #BUILD: ${{ vars.BUILD }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          #role-to-assume:

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push docker image to Amazon ECR
        id: build_image
        run: |
          npm install --legacy-bundling shelljs
          npm run build-dev ${{ secrets.ECR_REGISTRY }}/${{ vars.ECR_REPO }} ${{ vars.BUILD }}
          docker push ${{ secrets.ECR_REGISTRY }}/${{ vars.ECR_REPO }}:v${{ vars.BUILD }}
        
  #deploy_to_ecs:
    #name: Update ECS Service
    #needs: build_and_deploy_to_ecr
    #runs-on: ubuntu-latest
    #environment: dev

    ##env:
      ##NEW_DOCKER_IMAGE: '${{ secrets.ECR_REGISTRY }}/${{ vars.ECR_REPO }}:v${{ vars.BUILD }}'

    #steps:
      #- name: Checkout files
        #uses: actions/checkout@v3
        #with:
          #repository: 'vaenterprises/jcg-terraform'
          #ref: 'jm-ecs'
          #token: ${{ secrets.CHECKOUT_TF_REPO_TOKEN }}

      #- name: Configure AWS credentials
        #uses: aws-actions/configure-aws-credentials@v1
        #with:
          #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #aws-region: ${{ vars.AWS_REGION }}

      #- name: Get task def file
        #env:
          #SOURCE_FILE: 'json/dev/exambuilder.ecs.json'
        #run: |
          #cat $SOURCE_FILE > task_definition.json

      #- uses: franzbischoff/replace_envs@v1
        #env:
          #CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME }}
          #CONTAINER_PORT: ${{ vars.APP_PORT }}
          #IMAGE: '${{ secrets.ECR_REGISTRY }}/${{ vars.ECR_REPO }}:v${{ vars.BUILD }}'
          #ECS_EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
        #with:
          #from_file: 'task_definition.json'
          #to_file: 'task_definition.json'
          #commit: 'false'

      #- run: cat task_definition.json

      #- name: Fill in the new image ID in the Amazon ECS task definition
        #id: task-def
        #uses: aws-actions/amazon-ecs-render-task-definition@v1
        #with:
          #task-definition: task_definition.json
          #container-name: ${{ vars.ECS_CONTAINER_NAME }}
          #image: '${{ secrets.ECR_REGISTRY }}/${{ vars.ECR_REPO }}:v${{ vars.BUILD }}'

      #- name: Deploy Amazon ECS task definition
        #uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        #with:
          #task-definition: ${{ steps.task-def.outputs.task-definition }}
          #service: ${{ vars.ECS_SERVICE_NAME }}
          #cluster: ${{ vars.ECS_CLUSTER }}
          #wait-for-service-stability: false
